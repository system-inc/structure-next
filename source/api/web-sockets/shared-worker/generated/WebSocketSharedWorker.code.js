// WebSocketSharedWorker Build Time: 2025-04-17T22:27:30.337Z

"use strict";(()=>{var u=Object.defineProperty;var I=(o,e,t)=>e in o?u(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var r=(o,e)=>u(o,"name",{value:e,configurable:!0});var s=(o,e,t)=>(I(o,typeof e!="symbol"?e+"":e,t),t);var c=(t=>(t.Pong="Pong",t.RequestClientConnections="RequestClientConnections",t))(c||{});function h(o){return{type:"WebSocketConnectionInformation",url:o.url||"",state:o.state,readyState:o.readyState!==void 0?o.readyState:null,reconnectAttempts:o.reconnectAttempts||0,reconnecting:o.reconnecting||!1,reconnectDelayInMilliseconds:o.reconnectDelayInMilliseconds||1e3,maximumReconnectDelayInMilliseconds:o.maximumReconnectDelayInMilliseconds||3e4,statistics:o.statistics,createdAt:Date.now()}}r(h,"createWebSocketConnectionInformationMessage");function W(o){return{type:"WebSocketMessage",data:o}}r(W,"createWebSocketDataMessage");function S(o){return{type:"WebSocketError",message:o,createdAt:Date.now()}}r(S,"createWebSocketErrorMessage");var C=class C{constructor(e,t){s(this,"id");s(this,"messagePort");s(this,"heartbeatInterval",null);s(this,"lastActiveAt");s(this,"firstConnectedAt");this.id=e,this.messagePort=t,this.firstConnectedAt=new Date,this.lastActiveAt=new Date}sendMessage(e,t){try{return this.messagePort.postMessage(e),!0}catch(n){return console.log("[SharedWorkerClientConnection] Failed to send message:",n),t(this),!1}}updateLastActive(){return this.lastActiveAt=new Date,this.lastActiveAt}handleDisconnect(){this.heartbeatInterval&&(clearInterval(this.heartbeatInterval),this.heartbeatInterval=null)}};r(C,"SharedWorkerClientConnection");var i=C;var k=class k{constructor(){s(this,"clientConnections");this.clientConnections=new Map,typeof self!="undefined"&&(self.onconnect=this.onClientConnect.bind(this))}onClientConnect(e){console.log("onClientConnect",e);let t=Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15),n=e.ports[0];this.addClientConnection(t,n)}addClientConnection(e,t){let n=new i(e,t);return this.clientConnections.set(e,n),t.onmessage=this.onClientConnectionMessage.bind(this,n),this.setupClientConnectionHeartbeat(n),this.sendMessage(n,{type:"ClientIdAssigned",clientId:e}),this.broadcastClientConnections(),console.log("Total clients connected:",this.clientConnections.size),n}handleClientDisconnection(e){console.log("handleClientDisconnection:",e),this.clientConnections.has(e.id)&&(e.handleDisconnect(),this.clientConnections.delete(e.id),this.broadcastClientConnections()),console.log("Total clients connected:",this.clientConnections.size)}setupClientConnectionHeartbeat(e){e.heartbeatInterval=setInterval(()=>{try{let t=this.clientConnections.get(e.id);if(!t){console.log("Client no longer exists:",e.id);return}if(!t.sendMessage({type:"Ping"},this.handleClientDisconnection.bind(this)))return;Date.now()-t.lastActiveAt.getTime()>1e4&&(console.log("Client timed out:",t.id),this.handleClientDisconnection(t))}catch(t){console.log("Heartbeat error, client disconnected:",e.id,t),this.handleClientDisconnection(e)}},3e3)}sendMessage(e,t){return e.sendMessage(t,this.handleClientDisconnection.bind(this))}broadcastMessage(e){this.clientConnections.forEach(t=>{this.sendMessage(t,e)})}onClientConnectionMessage(e,t){switch(t.data&&(!t.data.type||t.data.type!=="Pong")&&console.log("[SharedWorkerServer] Received message from client:",t.data),t.data.type){case"Pong":e.updateLastActive();break;case"RequestClientConnections":this.sendMessage(e,this.createClientConnectionsMessage());break}}createClientConnectionsMessage(){let e=Array.from(this.clientConnections.values()).map(t=>({id:t.id,firstConnectedAt:t.firstConnectedAt,lastActiveAt:t.lastActiveAt}));return{type:"ClientConnections",clientConnections:e}}broadcastClientConnections(){let e=this.createClientConnectionsMessage();this.broadcastMessage(e)}};r(k,"SharedWorkerServer");var l=k;var b=class b{constructor(e,t){s(this,"socket",null);s(this,"protocols",null);s(this,"url",null);s(this,"state","Disconnected");s(this,"reconnecting",!1);s(this,"reconnectAttempts",0);s(this,"reconnectTimeout",null);s(this,"reconnectDelayInMilliseconds",1e3);s(this,"maximumReconnectDelayInMilliseconds",3e4);s(this,"statistics");s(this,"createdAt",Date.now());s(this,"onMessage");s(this,"onStateChange");this.statistics={messagesSent:0,messagesReceived:0,bytesSent:0,bytesReceived:0,averageLatencyInMilliseconds:null,lastMessageSentAt:null,lastMessageReceivedAt:null,lastPingSentAt:null,lastPongReceivedAt:null,connectedAt:null},this.onMessage=e,this.onStateChange=t}connect(e,t){this.url=e,this.protocols=t||null,this.updateState("Connecting"),this.socket&&this.socket.close();try{return this.socket=t?new WebSocket(e,t):new WebSocket(e),this.socket.onopen=this.handleOpen.bind(this),this.socket.onmessage=this.handleMessage.bind(this),this.socket.onerror=this.handleError.bind(this),this.socket.onclose=this.handleClose.bind(this),console.log("[WebSocketConnection] Connecting to",e),!0}catch(n){return console.error("[WebSocketConnection] Failed to create WebSocket:",n),this.updateState("Failed"),this.reconnect(),!1}}disconnect(e,t){if(console.log("[WebSocketConnection] Disconnecting",e,t),this.reconnectTimeout&&(clearTimeout(this.reconnectTimeout),this.reconnectTimeout=null),this.socket){try{this.socket.close(e,t)}catch(n){console.error("[WebSocketConnection] Error closing WebSocket:",n)}this.socket=null}return this.updateState("Disconnected"),!0}send(e){if(!this.socket||this.socket.readyState!==WebSocket.OPEN)return console.error("[WebSocketConnection] Cannot send message: WebSocket not connected"),!1;try{let t=typeof e=="string"?e:JSON.stringify(e);return this.socket.send(t),this.statistics.messagesSent++,this.statistics.bytesSent+=t.length,this.statistics.lastMessageSentAt=Date.now(),this.updateState(this.state),!0}catch(t){return console.error("[WebSocketConnection] Error sending message:",t),this.updateState(this.state),!1}}handleOpen(){console.log("[WebSocketConnection] Connected to",this.url),this.reconnectAttempts=0,this.reconnectDelayInMilliseconds=1e3,this.statistics.connectedAt=Date.now(),this.updateState("Connected")}handleMessage(e){this.statistics.messagesReceived++,this.statistics.lastMessageReceivedAt=Date.now(),e.data&&typeof e.data=="string"?this.statistics.bytesReceived+=e.data.length:e.data instanceof Blob&&(this.statistics.bytesReceived+=e.data.size);let t;try{if(typeof e.data=="string"&&(e.data.startsWith("{")||e.data.startsWith("["))){if(t=JSON.parse(e.data),t&&typeof t=="object"&&"type"in t&&t.type==="Pong"&&(this.statistics.lastPongReceivedAt=Date.now(),this.statistics.lastPingSentAt)){let n=this.statistics.lastPongReceivedAt-this.statistics.lastPingSentAt;this.statistics.averageLatencyInMilliseconds===null?this.statistics.averageLatencyInMilliseconds=n:this.statistics.averageLatencyInMilliseconds=this.statistics.averageLatencyInMilliseconds*.7+n*.3}}else t={type:"Raw",content:e.data,timestamp:Date.now()}}catch(n){console.error("[WebSocketConnection] Error parsing message:",n),t={type:"Unparseable",content:e.data,error:n instanceof Error?n.message:"Unknown error",timestamp:Date.now()}}this.onMessage&&this.onMessage(t),this.updateState(this.state)}handleError(e){console.error("[WebSocketConnection] Error:",e),this.updateState(this.state)}handleClose(e){console.log("[WebSocketConnection] Disconnected:",e.code,e.reason),e.wasClean||console.error("[WebSocketConnection] WebSocket closed unexpectedly:",e.code,e.reason),this.statistics.connectedAt=null,this.updateState("Disconnected"),e.wasClean||this.reconnect()}reconnect(){if(this.reconnectTimeout)return;this.reconnectAttempts++;let e=Math.min(this.reconnectDelayInMilliseconds*Math.pow(1.5,this.reconnectAttempts-1),3e4);console.log(`[WebSocketConnection] Reconnecting in ${e}ms (attempt ${this.reconnectAttempts})`),this.updateState("Reconnecting"),this.reconnectTimeout=setTimeout(()=>{this.reconnectTimeout=null,this.url&&this.connect(this.url,this.protocols||void 0)},e)}getWebSocketConnectionInformation(){return{url:this.url,state:this.state,readyState:this.socket?this.socket.readyState:null,reconnectAttempts:this.reconnectAttempts,reconnecting:this.reconnecting,reconnectDelayInMilliseconds:this.reconnectDelayInMilliseconds,maximumReconnectDelayInMilliseconds:this.maximumReconnectDelayInMilliseconds,statistics:this.statistics,createdAt:this.createdAt}}updateState(e){this.state=e,this.onStateChange&&this.onStateChange(this.getWebSocketConnectionInformation())}};r(b,"WebSocketConnection");var d=b;var f=class f extends l{constructor(){super();s(this,"webSocketConnection");s(this,"handledFirstConnectWebSocketRequest",!1);this.webSocketConnection=new d(this.handleWebSocketConnectionMessage.bind(this),this.handleWebSocketConnectionStateChange.bind(this))}addClientConnection(t,n){let a=super.addClientConnection(t,n);return(this.clientConnections.size>1||this.webSocketConnection.state!=="Disconnected")&&this.sendMessage(a,h(this.webSocketConnection)),a}onClientConnectionMessage(t,n){if(n.data&&n.data.type&&Object.values(c).includes(n.data.type))super.onClientConnectionMessage(t,n);else{let a=n.data;switch(a.type){case"ConnectWebSocket":this.handleConnectWebSocketRequest(t,a);break;case"SendWebSocketMessage":this.handleSendWebSocketMessageRequest(t,a);break;case"DisconnectWebSocket":console.log("[WebSocketSharedWorkerServer] Disconnect WebSocket request received but not yet implemented");break;default:{console.log("[WebSocketSharedWorkerServer] Unhandled message type:",a);break}}}}handleConnectWebSocketRequest(t,n){if(console.log("[WebSocketSharedWorkerServer] Connect WebSocket request:",n),!this.handledFirstConnectWebSocketRequest){if(!n.url){console.error("[WebSocketSharedWorkerServer] Missing WebSocket URL"),this.broadcastWebSocketErrorMessage("Missing WebSocket URL");return}this.handledFirstConnectWebSocketRequest=!0,this.webSocketConnection.connect(n.url,n.protocols)||this.broadcastWebSocketErrorMessage("Failed to connect to URL: "+n.url)}}handleSendWebSocketMessageRequest(t,n){if(console.log("[WebSocketSharedWorkerServer] Send WebSocket message request from",t.id,n),n.data===void 0){console.error("[WebSocketSharedWorkerServer] Missing WebSocket message data"),this.sendWebSocketErrorMessage(t,"Missing WebSocket message data");return}this.webSocketConnection.send(n.data)||this.sendWebSocketErrorMessage(t,"Failed to send message, WebSocket not connected")}handleWebSocketConnectionMessage(t){console.log("[WebSocketSharedWorkerServer] Received WebSocket message:",t),this.broadcastMessage(W(t))}handleWebSocketConnectionStateChange(t){console.log("[WebSocketSharedWorkerServer] WebSocket state changed:",t),this.broadcastMessage(h(t))}sendWebSocketErrorMessage(t,n){this.sendMessage(t,S(n))}broadcastWebSocketErrorMessage(t){this.broadcastMessage(S(t))}};r(f,"WebSocketSharedWorkerServer");var g=f;var A=new g,de=A;})();
