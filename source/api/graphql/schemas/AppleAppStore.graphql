schema {
    query: Query
}

type AppleStoreTransactionOrderMapping {
    commerceOrder: CommerceOrder!
    commerceOrderId: String!
    createdAt: DateTimeISO!
    id: String!
    transactionId: String!
}

type CommerceOrder {
    appliedDiscounts: [CommerceOrderDiscount!]
    createdAt: DateTimeISO!
    emailAddress: String!
    fulfillmentSource: String
    fulfillmentStatus: CommerceOrderFulfillmentStatus!
    id: String!
    identifier: String!
    lineItems: [CommerceOrderLineItem!]
    metadata: JSON
    payment: Payment
    paymentStatus: PaymentStatus
    priceInfo: CommerceOrderPrice!
    refunds: [Refund!]
    shipments: [Shipment!]
    shippingInfo: CommerceOrderShippingInfo
    source: String!
    status: CommerceOrderStatus!
    statusRecords: [StatusRecord!]
    updatedAt: DateTimeISO!
}

type CommerceOrderDiscount {
    amount: MonetaryDecimal!
    code: String
    colorOption: LabelColorOption
    iconAlt: String
    iconUrl: String
    items: [CommerceOrderLineItemDiscount!]
}

"""
The fulfillment status of the order
"""
enum CommerceOrderFulfillmentStatus {
    Cancelled
    Fulfilled
    NotStart
    PartiallyFulfilled
    Shipped
    Unfulfilled
}

type CommerceOrderLineItem {
    createdAt: DateTimeISO!
    id: String!
    indexId: Int!
    originalQuantity: Int
    productVariantId: String!
    quantity: Int!
    status: CommerceOrderLineItemStatus!
    statusRecords: [StatusRecord!]
    updatedAt: DateTimeISO!
}

type CommerceOrderLineItemDiscount {
    amount: MonetaryDecimal!
    indexId: Int!
    unitAmount: MonetaryDecimal
}

type CommerceOrderLineItemPrice {
    indexId: Int!
    originalSubtotal: MonetaryDecimal!
    originalUnitPrice: MonetaryDecimal
    subtotal: MonetaryDecimal!
    unitPrice: MonetaryDecimal
}

"""
The status of the order line item
"""
enum CommerceOrderLineItemStatus {
    Cancelled
    Pending
    Shipped
}

type CommerceOrderPrice {
    amount: MonetaryDecimal!
    currencyCode: String!
    lineItemPrices: [CommerceOrderLineItemPrice!]!
    originalSubtotal: MonetaryDecimal!
    shippingRate: CommerceOrderShippingRate!
    subtotal: MonetaryDecimal!
    tax: CommerceOrderTax!
}

type CommerceOrderShippingInfo {
    shippingAddress: StreetAddressObject!
}

type CommerceOrderShippingRate {
    amount: MonetaryDecimal!
    originalAmount: MonetaryDecimal!
}

"""
The status of the order
"""
enum CommerceOrderStatus {
    Cancelled
    Complete
    Open
    OutOfStock
    Pending
    Refunded
    WaitPayment
}

type CommerceOrderTax {
    shipping: MonetaryDecimal!
    total: MonetaryDecimal!
}

enum CreditCardType {
    Amex
    Discover
    Mastercard
    Unknown
    Visa
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

"""
The status of the delivery
"""
enum DeliveryStatus {
    AttemptedDelivery
    Delivered
    InTransit
    OutForDelivery
    ReadyForPickup
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The label color to be used for display
"""
enum LabelColorOption {
    Blue
    Green
}

"""
Monetary decimal custom scalar type, we stored and operate the value in cents, and this scalar will convert the value to dollar when read and convert the value to cents when write.
"""
scalar MonetaryDecimal

type Payment {
    amount: MonetaryDecimal!
    authorizedAt: DateTimeISO
    cancelledAt: DateTimeISO
    capturedAt: DateTimeISO
    confirmedAt: DateTimeISO
    createdAt: DateTimeISO!
    currencyCode: String!
    externalReferenceId: String
    id: String!
    paymentMethod: PaymentMethod
    paymentProcessorType: PaymentProcessorType!
    status: PaymentStatus!
    updatedAt: DateTimeISO!
}

interface PaymentMethod {
    externalResourceId: String
    paymentProcessorType: PaymentProcessorType!
    type: PaymentMethodType!
}

type PaymentMethodAppleInAppPurchase implements PaymentMethod {
    externalResourceId: String
    paymentProcessorType: PaymentProcessorType!
    type: PaymentMethodType!
}

type PaymentMethodCreditCard implements PaymentMethod {
    billingAddress: StreetAddressObject!
    cardType: CreditCardType!
    expirationMonth: Int!
    expirationYear: Int!
    externalResourceId: String
    last4: String!
    paymentProcessorType: PaymentProcessorType!
    type: PaymentMethodType!
}

enum PaymentMethodType {
    AppleInAppPurchase
    CreditCard
}

enum PaymentProcessorType {
    AppleInAppPurchase
    Stripe
    StripeEmbedded
    Test
}

"""
The status of the payment
"""
enum PaymentStatus {
    Authorized
    Cancelled
    Captured
    Confirmed
    FailToAuthorize
    Pending
}

type Query {
    appleStoreTransactionWithOrderInfo(
        originalTransactionId: String
        transactionId: String!
    ): AppleStoreTransactionOrderMapping
}

type Refund {
    amount: MonetaryDecimal
    commerceOrder: CommerceOrder
    commerceOrderId: String!
    createdAt: DateTimeISO!
    id: String!
    items: [RefundItem!]!
    metadata: JSON
    reason: String
    status: RefundStatus!
    statusRecords: [StatusRecord!]
    updatedAt: DateTimeISO!
}

type RefundItem {
    lineItemId: Float!
    quantity: Float!
}

"""
The status of a refund.
"""
enum RefundStatus {
    Cancelled
    Created
    Failed
    Issued
    Pending
    Rejected
    RequiresAction
}

type Shipment {
    cancelledAt: DateTimeISO
    createdAt: DateTimeISO!
    createdByAccountId: String
    createdByProfileId: String
    deliveredAt: DateTimeISO
    deliveryStatus: DeliveryStatus!
    id: String!
    label: ShippingLabel
    orderIndexId: Int!
    packageInfo: ShippingPackageInfo!
    shippedAt: DateTimeISO
    source: String!
    status: ShipmentStatus!
    toAddress: StreetAddressObject!
    updatedAt: DateTimeISO!
    updatedByAccountId: String
    updatedByProfileId: String
}

"""
The status of the shipping
"""
enum ShipmentStatus {
    Cancelled
    Delivered
    LabelPrinted
    LabelPurchased
    Pending
    Shipped
}

type ShippingLabel {
    carrier: String!
    serviceType: ShippingServiceType!
    trackingNumber: String!
    trackingUrl: String
}

type ShippingPackageInfo {
    items: [ShippingPackageItem!]!
    packageIndexId: Float!
}

type ShippingPackageItem {
    indexId: Float!
    quantity: Float!
}

enum ShippingServiceType {
    UPSGround
    USPSStandard
}

type StatusRecord {
    description: String
    status: String!
    timestamp: DateTimeISO!
}

type StreetAddressObject {
    city: String!
    company: String
    country: String!
    firstName: String!
    lastName: String!
    line1: String!
    line2: String
    phoneNumber: String
    postalCode: String!
    state: String!
}
