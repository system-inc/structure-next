schema {
    query: Query
    mutation: Mutation
}

input CheckoutSessionCreateDirectItemInput {
    productVariantId: String!
    quantity: Int!
}

"""
The operator of a field filter
"""
enum ColumnFilterConditionOperator {
    Equal
    GreaterThan
    GreaterThanOrEqual
    In
    IsNotNull
    IsNull
    LessThan
    LessThanOrEqual
    Like
    NotEqual
    NotIn
    NotLike
}

input ColumnFilterInput {
    caseSensitive: Boolean
    column: String!
    operator: ColumnFilterConditionOperator!
    value: JSON!
}

type CommerceCheckoutSession {
    appliedDiscounts: [CommerceOrderDiscount!]
    closedAt: DateTimeISO
    completedAt: DateTimeISO
    createdAt: DateTimeISO!
    externalMetadata: JSON
    failedCount: Float!
    id: String!
    order: CommerceOrder
    orderMetadata: JSON
    paymentProcessorType: PaymentProcessorType!
    priceInfo: CommerceOrderPrice
    status: CommerceCheckoutSessionStatus!
}

input CommerceCheckoutSessionCreateDirectInput {
    emailAddress: String
    items: [CheckoutSessionCreateDirectItemInput!]!
    orderMetadata: JSON
    paymentProcessorType: PaymentProcessorType! = Stripe
    returnBaseUrl: String!
}

enum CommerceCheckoutSessionStatus {
    Closed
    Complete
    Expired
    Failed
    Pending
}

type CommerceOrder {
    appliedDiscounts: [CommerceOrderDiscount!]
    createdAt: DateTimeISO!
    emailAddress: String!
    fulfillmentSource: String
    fulfillmentStatus: CommerceOrderFulfillmentStatus!
    id: String!
    identifier: String!
    lineItems: [CommerceOrderLineItem!]
    metadata: JSON
    payment: Payment
    paymentStatus: PaymentStatus
    priceInfo: CommerceOrderPrice!
    refunds: [Refund!]
    shipments: [Shipment!]
    shippingInfo: CommerceOrderShippingInfo
    source: String!
    status: CommerceOrderStatus!
    statusRecords: [StatusRecord!]
    updatedAt: DateTimeISO!
}

type CommerceOrderDiscount {
    amount: MonetaryDecimal!
    code: String
    colorOption: LabelColorOption
    items: [CommerceOrderLineItemDiscount!]
}

"""
The fulfillment status of the order
"""
enum CommerceOrderFulfillmentStatus {
    Cancelled
    Fulfilled
    NotStart
    PartiallyFulfilled
    Shipped
    Unfulfilled
}

type CommerceOrderLineItem {
    createdAt: DateTimeISO!
    id: String!
    indexId: Int!
    originalQuantity: Int
    productVariantId: String!
    quantity: Int!
    status: CommerceOrderLineItemStatus!
    statusRecords: [StatusRecord!]
    updatedAt: DateTimeISO!
}

type CommerceOrderLineItemDiscount {
    amount: MonetaryDecimal!
    indexId: Int!
    unitAmount: MonetaryDecimal
}

type CommerceOrderLineItemPrice {
    indexId: Int!
    originalSubtotal: MonetaryDecimal!
    originalUnitPrice: MonetaryDecimal
    subtotal: MonetaryDecimal!
    unitPrice: MonetaryDecimal
}

"""
The status of the order line item
"""
enum CommerceOrderLineItemStatus {
    Cancelled
    Pending
    Shipped
}

type CommerceOrderPrice {
    amount: MonetaryDecimal!
    currencyCode: String!
    lineItemPrices: [CommerceOrderLineItemPrice!]!
    originalSubtotal: MonetaryDecimal!
    shippingRate: CommerceOrderShippingRate!
    subtotal: MonetaryDecimal!
    tax: CommerceOrderTax!
}

union CommerceOrderResult = CommerceOrder | PublicCommerceOrder

type CommerceOrderShippingInfo {
    shippingAddress: StreetAddressObject!
}

type CommerceOrderShippingRate {
    amount: MonetaryDecimal!
    originalAmount: MonetaryDecimal!
}

"""
The status of the order
"""
enum CommerceOrderStatus {
    Cancelled
    Complete
    Open
    OutOfStock
    Pending
    Refunded
    WaitPayment
}

type CommerceOrderTax {
    shipping: MonetaryDecimal!
    total: MonetaryDecimal!
}

input CreateFulfillmentInput {
    baseUrl: String!
    items: [CreateFulfillmentItemInput!]!
    orderIdentifier: String!
    originAddress: StreetAddressInput!
    trackingInfo: CreateFulfillmentTrackingInfoInput!
}

input CreateFulfillmentItemInput {
    id: Float!
    quantity: Float!
}

input CreateFulfillmentTrackingInfoInput {
    company: String!
    number: String!
    serviceType: ShippingServiceType!
    url: String!
}

input CreateOrderRefundInput {
    lineItems: [CreateOrderRefundLineItemInput!]!
    orderId: String!
    reason: String
}

input CreateOrderRefundLineItemInput {
    orderLineItemId: Float!
    quantity: Float!
}

input CreateProductBundleInput {
    description: String
    id: String
    identifier: String!
    items: [CreateProductBundleItemInput!]!
    name: String!
    visibility: ProductBundleVisibility
}

input CreateProductBundleItemInput {
    productVariantId: String!
    quantity: Float!
}

input CreateProductInput {
    description: String
    id: String
    identifier: String
    name: String!
    status: ProductStatus
    variants: [CreateProductVariantInput!]!
    vendorId: String!
}

input CreateProductVariantInput {
    attributes: [ProductVariantAttributeInput!]
    barcode: String
    description: String
    gtin: String
    id: String
    inventoryPolicy: ProductVariantInventoryPolicy
    isVirtual: Boolean
    name: String!
    position: Float
    price: ProductVariantPriceInput!
    productId: String
    setDefault: Boolean
    sku: String
    status: ProductVariantStatus
    taxCode: String
}

input CreateVendorInput {
    description: String
    identifier: String
    name: String!
}

enum CreditCardType {
    Amex
    Discover
    Mastercard
    Unknown
    Visa
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

"""
The status of the delivery
"""
enum DeliveryStatus {
    AttemptedDelivery
    Delivered
    InTransit
    OutForDelivery
    ReadyForPickup
}

type FulfillmentOrder {
    createdAt: DateTimeISO!
    emailAddress: String!
    holdOnShipping: Boolean!
    identifier: String!
    lineItems: [FulfillmentOrderLineItem!]!
    shipments: [Shipment!]!
    shippingAddress: StreetAddressObject!
}

type FulfillmentOrderLineItem {
    orderLineItemId: String!
    productVariant: FulfillmentProductVariant!
    productVariantId: String!
    quantity: Int!
}

type FulfillmentProductVariant {
    barcode: String
    description: String
    gtin: String
    id: String!
    name: String!
    sku: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The label color to be used for display
"""
enum LabelColorOption {
    Blue
    Green
}

type MediaObject {
    type: MediaObjectType!
    url: String!
    variant: String
}

enum MediaObjectType {
    File
    Image
    Video
}

"""
Monetary decimal custom scalar type, we stored and operate the value in cents, and this scalar will convert the value to dollar when read and convert the value to cents when write.
"""
scalar MonetaryDecimal

type Mutation {
    commerceCheckoutSessionCreateDirect(input: CommerceCheckoutSessionCreateDirectInput!): CommerceCheckoutSession!
    commerceCreateFulfillment(input: CreateFulfillmentInput!): Shipment!
    commerceOrderCancel(orderId: String!): OperationResult!
    commerceOrderRefund(input: CreateOrderRefundInput!): Refund!
    commerceProductBundleCreate(input: CreateProductBundleInput!): ProductBundle!
    commerceProductBundleDelete(id: String!): OperationResult!
    commerceProductBundleUpdate(input: UpdateProductBundleInput!): ProductBundle!
    commerceProductCreate(input: CreateProductInput!): Product!
    commerceProductUpdate(input: UpdateProductInput!): Product!
    commerceRefundRequestRejectPrivileged(id: String!, reason: String): Refund!
    commerceVendorCreate(input: CreateVendorInput!): Vendor!
    commerceVendorUpdate(input: UpdateVendorInput!): Vendor!
    productVariantRemoveGalleryAsset(assetId: String!, id: String!): ProductVariant!
    productVariantReorderGallery(assetIds: [String!]!, id: String!): ProductVariant!
    warehouseCreate(input: WarehouseCreateInput!): Warehouse!
    warehouseDelete(id: String!): OperationResult!
    warehouseInventoryCreate(input: WarehouseInventoryCreateInput!): WarehouseInventory!
    warehouseInventoryDelete(id: String!): OperationResult!
    warehouseInventoryUpdate(input: WarehouseInventoryUpdateInput!): WarehouseInventory!
    warehouseUpdate(input: WarehouseUpdateInput!): Warehouse!
}

type OperationResult {
    success: Boolean!
}

"""
The order direction of a query
"""
enum OrderByDirection {
    Ascending
    Descending
}

input OrderByInput {
    direction: OrderByDirection
    key: String!
}

input OrderLineItemInput {
    indexId: Int!
    productVariantId: String!
    quantity: Int!
}

type Pagination {
    itemIndex: Int!
    itemIndexForNextPage: Int
    itemIndexForPreviousPage: Int
    itemsPerPage: Int!
    itemsTotal: Int!
    page: Int!
    pagesTotal: Int!
}

type PaginationFulfillmentOrderResult {
    items: [FulfillmentOrder!]!
    pagination: Pagination!
}

input PaginationInput {
    filters: [ColumnFilterInput!]
    itemIndex: Int
    itemsPerPage: Int!
    orderBy: [OrderByInput!]
}

type PaginationOrderResult {
    items: [CommerceOrder!]!
    pagination: Pagination!
}

type PaginationRefundResult {
    items: [Refund!]!
    pagination: Pagination!
}

type Payment {
    amount: MonetaryDecimal!
    authorizedAt: DateTimeISO
    cancelledAt: DateTimeISO
    capturedAt: DateTimeISO
    confirmedAt: DateTimeISO
    createdAt: DateTimeISO!
    currencyCode: String!
    externalReferenceId: String
    id: String!
    paymentMethod: PaymentMethod
    paymentProcessorType: PaymentProcessorType!
    status: PaymentStatus!
    updatedAt: DateTimeISO!
}

interface PaymentMethod {
    externalResourceId: String
    paymentProcessorType: PaymentProcessorType!
    type: PaymentMethodType!
}

type PaymentMethodAppleInAppPurchase implements PaymentMethod {
    externalResourceId: String
    paymentProcessorType: PaymentProcessorType!
    type: PaymentMethodType!
}

type PaymentMethodCreditCard implements PaymentMethod {
    billingAddress: StreetAddressObject!
    cardType: CreditCardType!
    expirationMonth: Int!
    expirationYear: Int!
    externalResourceId: String
    last4: String!
    paymentProcessorType: PaymentProcessorType!
    type: PaymentMethodType!
}

enum PaymentMethodType {
    AppleInAppPurchase
    CreditCard
}

enum PaymentProcessorType {
    AppleInAppPurchase
    Stripe
    StripeEmbedded
    Test
}

"""
The status of the payment
"""
enum PaymentStatus {
    Authorized
    Cancelled
    Captured
    Confirmed
    FailToAuthorize
    Pending
}

type Product {
    createdAt: DateTimeISO!
    createdByAccountId: String!
    createdByProfileId: String!
    defaultVariantId: String
    description: String
    id: String!
    identifier: String!
    name: String!
    status: ProductStatus!
    updatedAt: DateTimeISO!
    updatedByAccountId: String
    updatedByProfileId: String
    variants: [ProductVariant!]
    vendor: Vendor
    vendorId: String
}

type ProductBundle {
    createdAt: DateTimeISO!
    createdByAccountId: String!
    createdByProfileId: String!
    description: String
    id: String!
    identifier: String!
    items: [ProductBundleItem!]!
    name: String!
    updatedAt: DateTimeISO!
    updatedByAccountId: String
    updatedByProfileId: String
    visibility: ProductBundleVisibility!
}

type ProductBundleItem {
    indexId: String!
    productVariant: ProductVariant
    productVariantId: String!
    quantity: Float!
}

enum ProductBundleVisibility {
    Public
    Unlisted
}

type ProductBundlesPaginationResult {
    items: [ProductBundle!]!
    pagination: Pagination!
}

enum ProductStatus {
    Active
    Archived
    Draft
}

type ProductVariant {
    attributes: [ProductVariantAttributeObject!]
    barcode: String
    createdAt: DateTimeISO!
    createdByAccountId: String!
    createdByProfileId: String!
    description: String
    galleryUrls: [ProductVariantGalleryURL!]
    gtin: String
    id: String!
    inventoryPolicy: ProductVariantInventoryPolicy!
    isVirtual: Boolean!
    name: String!
    position: Float
    price: ProductVariantPriceObject!
    sku: String
    status: ProductVariantStatus!
    taxCode: String
    updatedAt: DateTimeISO!
    updatedByAccountId: String
    updatedByProfileId: String
}

input ProductVariantAttributeInput {
    displayName: String!
    key: ProductVariantAttributeKey!
    metadata: JSON
    value: String!
}

enum ProductVariantAttributeKey {
    AppStore
    Color
    Credits
    Size
    SubscriptionPlan
}

type ProductVariantAttributeObject {
    createdAt: DateTimeISO!
    displayName: String!
    id: String!
    key: ProductVariantAttributeKey!
    metadata: JSON
    value: String!
}

type ProductVariantGalleryURL {
    variants: [MediaObject!]!
}

"""
Whether customers are allowed to place an order for the product variant when it's out of stock.
"""
enum ProductVariantInventoryPolicy {
    AllowBackorder
    AllowWaitlist
    Deny
}

input ProductVariantPriceInput {
    amount: MonetaryDecimal!
    currencyCode: String!
}

type ProductVariantPriceObject {
    amount: MonetaryDecimal!
    currencyCode: String!
}

"""
The status of the product variant.
"""
enum ProductVariantStatus {
    Active
    Archived
    Draft
}

type ProductsPaginationResult {
    items: [Product!]!
    pagination: Pagination!
}

type PublicCommerceOrder {
    appliedDiscounts: [CommerceOrderDiscount!]
    createdAt: DateTimeISO!
    fulfillmentStatus: CommerceOrderFulfillmentStatus!
    identifier: String!
    lineItems: [PublicCommerceOrderLineItem!]
    paymentStatus: PaymentStatus
    priceInfo: CommerceOrderPrice!
    shipments: [PublicShipment!]
    source: String!
    status: CommerceOrderStatus!
}

type PublicCommerceOrderLineItem {
    id: String!
    indexId: Int!
    productVariantId: String!
    quantity: Int!
    status: CommerceOrderLineItemStatus!
}

type PublicShipment {
    cancelledAt: DateTimeISO
    createdAt: DateTimeISO!
    deliveredAt: DateTimeISO
    deliveryStatus: DeliveryStatus!
    label: ShippingLabel
    orderIndexId: Int!
    packageInfo: ShippingPackageInfo!
    shippedAt: DateTimeISO
    status: ShipmentStatus!
}

type Query {
    commerceCheckoutSession(id: String!): CommerceCheckoutSession!
    commerceCheckoutSessionLatest: CommerceCheckoutSession!
    commerceOrder(identifier: String!): CommerceOrderResult!
    commerceOrderPrivileged(id: String, identifier: String): CommerceOrder!
    commerceOrders(pagination: PaginationInput!): PaginationOrderResult!
    commerceOrdersByCheckoutSession(checkoutSessionId: String!): [CommerceOrderResult!]!
    commerceOrdersPrivileged(pagination: PaginationInput!): PaginationOrderResult!
    commerceOrdersReadyToFulfill(pagination: PaginationInput!): PaginationFulfillmentOrderResult!
    commerceProduct(id: String, identifier: String, name: String): Product!
    commerceProductBundle(id: String, identifier: String): ProductBundle!
    commerceProductBundles(pagination: PaginationInput!): ProductBundlesPaginationResult!
    commerceProductPrivileged(id: String, identifier: String, name: String): Product!
    commerceProducts(pagination: PaginationInput!): ProductsPaginationResult!
    commerceProductsPrivileged(pagination: PaginationInput!): ProductsPaginationResult!
    commerceRefundRequestsPrivileged(pagination: PaginationInput!): PaginationRefundResult!
    commerceVendor(id: String, identifier: String): Vendor!
    commerceVendors(pagination: PaginationInput!): VendorsResult!
    queryOrderPrice(input: QueryCommerceOrderPriceInput!): QueryCommerceOrderPriceResult!
    warehouse(id: String!): Warehouse!
    warehouses: [Warehouse!]!
}

input QueryCommerceOrderPriceInput {
    emailAddress: String
    lineItems: [OrderLineItemInput!]!
    metadata: JSON
    shippingAddress: StreetAddressInput
}

type QueryCommerceOrderPriceResult {
    appliedDiscounts: [CommerceOrderDiscount!]!
    orderPrice: CommerceOrderPrice!
}

type Refund {
    amount: MonetaryDecimal
    commerceOrder: CommerceOrder
    commerceOrderId: String!
    createdAt: DateTimeISO!
    id: String!
    items: [RefundItem!]!
    metadata: JSON
    reason: String
    status: RefundStatus!
    statusRecords: [StatusRecord!]
    updatedAt: DateTimeISO!
}

type RefundItem {
    lineItemId: Float!
    quantity: Float!
}

"""
The status of a refund.
"""
enum RefundStatus {
    Cancelled
    Created
    Failed
    Issued
    Pending
    Rejected
    RequiresAction
}

type Shipment {
    cancelledAt: DateTimeISO
    createdAt: DateTimeISO!
    createdByAccountId: String
    createdByProfileId: String
    deliveredAt: DateTimeISO
    deliveryStatus: DeliveryStatus!
    id: String!
    label: ShippingLabel
    orderIndexId: Int!
    packageInfo: ShippingPackageInfo!
    shippedAt: DateTimeISO
    source: String!
    status: ShipmentStatus!
    toAddress: StreetAddressObject!
    updatedAt: DateTimeISO!
    updatedByAccountId: String
    updatedByProfileId: String
}

"""
The status of the shipping
"""
enum ShipmentStatus {
    Cancelled
    Delivered
    LabelPrinted
    LabelPurchased
    Pending
    Shipped
}

type ShippingLabel {
    carrier: String!
    serviceType: ShippingServiceType!
    trackingNumber: String!
    trackingUrl: String
}

type ShippingPackageInfo {
    items: [ShippingPackageItem!]!
    packageIndexId: Float!
}

type ShippingPackageItem {
    indexId: Float!
    quantity: Float!
}

enum ShippingServiceType {
    UPSGround
    USPSFirstClassMail
    USPSMediaMail
    USPSParcelSelect
    USPSPriorityMail
    USPSPriorityMailExpress
}

type StatusRecord {
    description: String
    status: String!
    timestamp: DateTimeISO!
}

input StreetAddressInput {
    city: String!
    company: String
    country: String!
    firstName: String!
    lastName: String!
    line1: String!
    line2: String
    phoneNumber: String
    postalCode: String!
    state: String!
}

type StreetAddressObject {
    city: String!
    company: String
    country: String!
    firstName: String!
    lastName: String!
    line1: String!
    line2: String
    phoneNumber: String
    postalCode: String!
    state: String!
}

input UpdateProductBundleInput {
    addItems: [CreateProductBundleItemInput!]
    description: String
    id: String!
    identifier: String
    name: String
    removeItems: [String!]
    updateItems: [UpdateProductBundleItemInput!]
    visibility: ProductBundleVisibility
}

input UpdateProductBundleItemInput {
    indexId: String!
    quantity: Float!
}

input UpdateProductInput {
    description: String
    id: String
    identifier: String
    name: String
    newVariants: [CreateProductVariantInput!]
    removedVariantIds: [String!]
    status: ProductStatus
    updatedVariants: [UpdateProductVariantInput!]
}

input UpdateProductVariantAttributeInput {
    attributeToUpsert: ProductVariantAttributeInput
    idToDelete: String
}

input UpdateProductVariantInput {
    attributes: [UpdateProductVariantAttributeInput!]
    barcode: String
    description: String
    gtin: String
    id: String!
    inventoryPolicy: ProductVariantInventoryPolicy
    isVirtual: Boolean
    name: String
    position: Float
    price: ProductVariantPriceInput
    setDefault: Boolean
    sku: String
    status: ProductVariantStatus
    taxCode: String
}

input UpdateVendorInput {
    description: String
    id: String!
    identifier: String
    name: String
    status: VendorStatus
}

type Vendor {
    createdAt: DateTimeISO!
    createdByAccountId: String!
    createdByProfileId: String!
    description: String
    id: String!
    identifier: String!
    name: String!
    pagedProducts: ProductsPaginationResult
    products(pagination: PaginationInput!): ProductsPaginationResult!
    status: VendorStatus!
    updatedAt: DateTimeISO!
    updatedByAccountId: String
    updatedByProfileId: String
}

enum VendorStatus {
    Active
    Archived
    Inactive
}

type VendorsResult {
    items: [Vendor!]!
    pagination: Pagination!
}

type Warehouse {
    address: StreetAddressObject!
    createdAt: DateTimeISO!
    createdByAccountId: String!
    createdByProfileId: String!
    id: String!
    name: String!
    updatedAt: DateTimeISO!
    updatedByAccountId: String
    updatedByProfileId: String
}

input WarehouseCreateInput {
    address: StreetAddressInput!
    id: String
    name: String!
}

type WarehouseInventory {
    createdAt: DateTimeISO!
    id: String!
    lowInventoryThreshold: Int
    quantity: Int!
    updatedAt: DateTimeISO!
}

input WarehouseInventoryCreateInput {
    lowInventoryThreshold: Int
    productVariantId: String!
    quantity: Int!
    warehouseId: String!
}

input WarehouseInventoryUpdateInput {
    id: String!
    lowInventoryThreshold: Int
    quantity: Int
    quantityUpdateType: WarehouseInventoryUpdateType
}

enum WarehouseInventoryUpdateType {
    Add
    Set
    Subtract
}

input WarehouseUpdateInput {
    address: StreetAddressInput
    id: String!
    name: String
}
