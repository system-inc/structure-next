schema {
    query: Query
    mutation: Mutation
}

input ClientPropertiesInput {
    environment: String
}

input CreateEngagementEventInput {
    category: String
    clientProperties: ClientPropertiesInput
    deviceProperties: DevicePropertiesInput
    eventContext: EngagementEventContextInput
    name: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

enum DeviceOrientation {
    Landscape
    NotAvailable
    Portrait
}

input DevicePropertiesInput {
    orientation: DeviceOrientation
}

type EngagementEvent {
    createdAt: DateTimeISO!
    id: String!
    loggedAt: DateTimeISO
    name: String!
}

input EngagementEventContextInput {
    additionalData: JSON
    loggedAt: DateTimeISO
    referrer: String
    sessionDurationInMilliseconds: Int
    traceId: String
    traceSequenceNumber: Int
    viewIdentifier: String
    viewTitle: String
}

type EngagementLocationOverview {
    countryCode: String
    latitude: String
    longitude: String
    uniqueDeviceCount: Int!
}

type EngagementOverview {
    deviceCategoryPercentages: JSON
    locations: [EngagementLocationOverview!]!
    referrers: [EngagementReferrerOverview!]
    uniqueDeviceIds: Int!
    views: [EngagementViewOverview!]
}

input EngagementOverviewInput {
    endTime: DateTimeISO
    startTime: DateTimeISO
}

type EngagementReferrerOverview {
    referrer: String
    uniqueDeviceCount: Int!
}

type EngagementViewOverview {
    uniqueDeviceCount: Int!
    viewIdentifier: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
    engagementEventCreate(input: CreateEngagementEventInput!): OperationResult!
    engagementEventsCreate(inputs: [CreateEngagementEventInput!]!): OperationResult!
}

type OperationResult {
    success: Boolean!
}

type Query {
    engagementEvents: [EngagementEvent!]!
    engagementOverview(input: EngagementOverviewInput): EngagementOverview!
}
