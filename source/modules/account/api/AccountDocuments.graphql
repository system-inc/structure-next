# Account Authentication Registration or Sign In Create Mutation
# If the first challenge happens to be email, this will automatically send an email verification
# saving us from having to do that manually
mutation AccountAuthenticationRegistrationOrSignInCreate($input: AccountRegistrationOrSignInCreateInput!) {
    accountAuthenticationRegistrationOrSignInCreate(input: $input) {
        emailAddress
        authentication {
            status
            scopeType
            currentChallenge {
                challengeType
                status
            }
            updatedAt
            createdAt
        }
    }
}

# Account Authentication Query
# This is used to get the current authentication status
# Rather than parameters, this uses the authentication ID cookie to determine the current authentication status
query AccountAuthentication {
    accountAuthentication {
        status
        scopeType
        currentChallenge {
            challengeType
            status
        }
        updatedAt
        createdAt
    }
}

# Challenge - Email Verification
# Email Verification Query
# This is used to get the status of the email verification challenge
query AccountAuthenticationEmailVerification {
    accountAuthenticationEmailVerification {
        verification {
            status
            emailAddress
            lastEmailSentAt
        }
        authentication {
            status
            scopeType
            currentChallenge {
                challengeType
                status
            }
            updatedAt
            createdAt
        }
    }
}

# Challenge - Email Verification
# Email Verification Send Mutation
# This is used to manually send an email verification email if the user requests another email
mutation AccountAuthenticationEmailVerificationSend {
    accountAuthenticationEmailVerificationSend {
        verification {
            status
            emailAddress
            lastEmailSentAt
        }
        authentication {
            status
            scopeType
            currentChallenge {
                challengeType
                status
            }
            updatedAt
            createdAt
        }
    }
}

# Challenge - Email Verification
# Email Verification Verify Mutation
# This is used to verify the email address with a code sent to the email address
mutation AccountAuthenticationEmailVerificationVerify($input: AccountEmailVerificationVerifyInput!) {
    accountAuthenticationEmailVerificationVerify(input: $input) {
        verification {
            status
            emailAddress
            lastEmailSentAt
        }
        authentication {
            status
            scopeType
            currentChallenge {
                challengeType
                status
            }
            updatedAt
            createdAt
        }
    }
}

# Challenge - Account Password
# Account Password Verify Mutation
# This is used to verify the password of the account
mutation AccountAuthenticationPasswordVerify($input: AccountPasswordVerifyInput!) {
    accountAuthenticationPasswordVerify(input: $input) {
        success
        authentication {
            status
            scopeType
            currentChallenge {
                challengeType
                status
            }
            updatedAt
            createdAt
        }
    }
}

# Account Maintenance Session Create Mutation
# This is used to create a session for maintenance purposes, like changing the password
mutation AccountMaintenanceSessionCreate {
    accountMaintenanceSessionCreate {
        status
        scopeType
        currentChallenge {
            challengeType
            status
        }
        updatedAt
        createdAt
    }
}

# Account Registration Complete Mutation
# After this is complete, use AccountCurrent query to get the current account
mutation AccountRegistrationComplete($input: AccountRegistrationCompleteInput!) {
    accountRegistrationComplete(input: $input) {
        success
    }
}

# Account Sign In Complete Mutation
# After this is complete, use AccountCurrent query to get the current account
mutation AccountSignInComplete {
    accountSignInComplete {
        success
    }
}

# Account Password Update Mutation
# This is used to update the password of the account
mutation AccountPasswordUpdate($input: AccountPasswordUpdateInput!) {
    accountPasswordUpdate(input: $input) {
        success
    }
}

# Account Sign Out Mutation
mutation AccountSignOut {
    accountSignOut {
        success
    }
}

# Account Query
query Account {
    account {
        emailAddress
        profile {
            id
            username
            displayName
            givenName
            familyName
            images {
                url
                variant
            }
            updatedAt
            createdAt
        }
        accessRoles
        createdAt
    }
}

# Account Privileged Query
query AccountPrivileged($input: AccountInput!) {
    accountPrivileged(input: $input) {
        emailAddress
        profiles {
            username
            displayName
            givenName
            familyName
            images {
                url
                variant
            }
            updatedAt
            createdAt
        }
        accessRoles
        createdAt
    }
}

# Accounts Privileged Query
# query AccountsPrivileged($input: PaginationInput) {
query AccountsPrivileged($input: PaginationInputWithFilters) {
    accountsPrivileged(input: $input) {
        items {
            emailAddress
            profiles {
                username
                displayName
                givenName
                familyName
                images {
                    url
                    variant
                }
                updatedAt
                createdAt
            }
        }
        pagination {
            itemsTotal
            itemsPerPage
            page
            pagesTotal
            itemIndex
            itemIndexForNextPage
            itemIndexForPreviousPage
        }
    }
}

# Account Profile Username Validate Query
query AccountProfileUsernameValidate($username: String!) {
    accountProfileUsernameValidate(username: $username)
}

# Account Enrolled Challenges Query
query AccountEnrolledChallenges {
    account {
        enrolledChallenges
    }
}

# Account Profile Update Mutation
mutation AccountProfileUpdate($input: AccountProfileUpdateInput!) {
    accountProfileUpdate(input: $input) {
        username
        displayName
        givenName
        familyName
        images {
            url
            variant
        }
        updatedAt
        createdAt
    }
}

# Account Profile Public Query
query AccountProfilePublic($username: String!) {
    accountProfilePublic(username: $username) {
        username
        displayName
        images {
            url
            variant
        }
        createdAt
    }
}

# Account Available Access Roles Privileged Query
query AccountAvailableAccessRolesPrivileged {
    accountAvailableAccessRolesPrivileged
}

# Account Assigned Access Roles Privileged Query
# query AccountAssignedAccessRolesPrivileged($input: PaginationInput) {
query AccountAssignedAccessRolesPrivileged($input: PaginationInputWithFilters) {
    accountAssignedAccessRolesPrivileged(input: $input) {
        items {
            id
            type
            status
            emailAddress
            profile {
                username
                displayName
                images {
                    url
                    variant
                }
                createdAt
            }
            expiresAt
            createdAt
            updatedAt
        }
        pagination {
            itemsTotal
            itemsPerPage
            page
            pagesTotal
            itemIndex
            itemIndexForNextPage
            itemIndexForPreviousPage
        }
    }
}

# Account Access Role Revoke Privileged Mutation
mutation AccountAccessRoleRevokePrivileged($input: AccountAccessRoleRevokeInput!) {
    accountAccessRoleRevokePrivileged(input: $input) {
        success
    }
}

# Account Access Role Grant Priveleged Mutation
mutation AccountAccessRoleGrantPrivileged($input: AccountAccessRoleGrantInput!) {
    accountAccessRoleGrantPrivileged(input: $input) {
        id
        type
        status
        profile {
            username
            displayName
            images {
                type
                url
                variant
            }
            createdAt
        }
        expiresAt
        createdAt
        updatedAt
    }
}

# Account Delete Mutation
mutation AccountDelete($reason: String) {
    accountDelete(reason: $reason) {
        success
    }
}

# Account Delete Privileged Mutation
mutation AccountDeletePrivileged($input: AccountDeleteInput!) {
    accountDeletePrivileged(input: $input) {
        success
    }
}
